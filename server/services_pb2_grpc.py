# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import types_pb2 as types__pb2


class BLSSigningStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GenerateKeypairRaw = channel.unary_unary(
                '/BLSSigning/GenerateKeypairRaw',
                request_serializer=types__pb2.GenerateKeypairRequestRaw.SerializeToString,
                response_deserializer=types__pb2.GenerateKeypairResponseRaw.FromString,
                )
        self.GenerateKeypairHex = channel.unary_unary(
                '/BLSSigning/GenerateKeypairHex',
                request_serializer=types__pb2.GenerateKeypairRequestHex.SerializeToString,
                response_deserializer=types__pb2.GenerateKeypairResponseHex.FromString,
                )
        self.SignRaw = channel.unary_unary(
                '/BLSSigning/SignRaw',
                request_serializer=types__pb2.SignRequestRaw.SerializeToString,
                response_deserializer=types__pb2.SignResponseRaw.FromString,
                )
        self.SignHex = channel.unary_unary(
                '/BLSSigning/SignHex',
                request_serializer=types__pb2.SignRequestHex.SerializeToString,
                response_deserializer=types__pb2.SignResponseHex.FromString,
                )
        self.VerifyRaw = channel.unary_unary(
                '/BLSSigning/VerifyRaw',
                request_serializer=types__pb2.VerifyRequestRaw.SerializeToString,
                response_deserializer=types__pb2.VerifyResponse.FromString,
                )
        self.VerifyHex = channel.unary_unary(
                '/BLSSigning/VerifyHex',
                request_serializer=types__pb2.VerifyRequestHex.SerializeToString,
                response_deserializer=types__pb2.VerifyResponse.FromString,
                )
        self.AggregateRaw = channel.unary_unary(
                '/BLSSigning/AggregateRaw',
                request_serializer=types__pb2.AggregateRequestRaw.SerializeToString,
                response_deserializer=types__pb2.AggregateResponseRaw.FromString,
                )
        self.AggregateHex = channel.unary_unary(
                '/BLSSigning/AggregateHex',
                request_serializer=types__pb2.AggregateRequestHex.SerializeToString,
                response_deserializer=types__pb2.AggregateResponseHex.FromString,
                )
        self.VerifyAggregatedRaw = channel.unary_unary(
                '/BLSSigning/VerifyAggregatedRaw',
                request_serializer=types__pb2.VerifyAggregateRequestRaw.SerializeToString,
                response_deserializer=types__pb2.VerifyAggregateResponse.FromString,
                )
        self.VerifyAggregatedHex = channel.unary_unary(
                '/BLSSigning/VerifyAggregatedHex',
                request_serializer=types__pb2.VerifyAggregateRequestHex.SerializeToString,
                response_deserializer=types__pb2.VerifyAggregateResponse.FromString,
                )


class BLSSigningServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GenerateKeypairRaw(self, request, context):
        """generate key-pairs either as bytes or hex string based on the request
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateKeypairHex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignRaw(self, request, context):
        """return the signature given the private key identifier
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignHex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyRaw(self, request, context):
        """verifies the signature given the public key and message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyHex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AggregateRaw(self, request, context):
        """returns the aggregated signature generated by combining all the given signatures
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AggregateHex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyAggregatedRaw(self, request, context):
        """verifies the aggregated signature from the messages and public keys given
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyAggregatedHex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BLSSigningServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GenerateKeypairRaw': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateKeypairRaw,
                    request_deserializer=types__pb2.GenerateKeypairRequestRaw.FromString,
                    response_serializer=types__pb2.GenerateKeypairResponseRaw.SerializeToString,
            ),
            'GenerateKeypairHex': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateKeypairHex,
                    request_deserializer=types__pb2.GenerateKeypairRequestHex.FromString,
                    response_serializer=types__pb2.GenerateKeypairResponseHex.SerializeToString,
            ),
            'SignRaw': grpc.unary_unary_rpc_method_handler(
                    servicer.SignRaw,
                    request_deserializer=types__pb2.SignRequestRaw.FromString,
                    response_serializer=types__pb2.SignResponseRaw.SerializeToString,
            ),
            'SignHex': grpc.unary_unary_rpc_method_handler(
                    servicer.SignHex,
                    request_deserializer=types__pb2.SignRequestHex.FromString,
                    response_serializer=types__pb2.SignResponseHex.SerializeToString,
            ),
            'VerifyRaw': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyRaw,
                    request_deserializer=types__pb2.VerifyRequestRaw.FromString,
                    response_serializer=types__pb2.VerifyResponse.SerializeToString,
            ),
            'VerifyHex': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyHex,
                    request_deserializer=types__pb2.VerifyRequestHex.FromString,
                    response_serializer=types__pb2.VerifyResponse.SerializeToString,
            ),
            'AggregateRaw': grpc.unary_unary_rpc_method_handler(
                    servicer.AggregateRaw,
                    request_deserializer=types__pb2.AggregateRequestRaw.FromString,
                    response_serializer=types__pb2.AggregateResponseRaw.SerializeToString,
            ),
            'AggregateHex': grpc.unary_unary_rpc_method_handler(
                    servicer.AggregateHex,
                    request_deserializer=types__pb2.AggregateRequestHex.FromString,
                    response_serializer=types__pb2.AggregateResponseHex.SerializeToString,
            ),
            'VerifyAggregatedRaw': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyAggregatedRaw,
                    request_deserializer=types__pb2.VerifyAggregateRequestRaw.FromString,
                    response_serializer=types__pb2.VerifyAggregateResponse.SerializeToString,
            ),
            'VerifyAggregatedHex': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyAggregatedHex,
                    request_deserializer=types__pb2.VerifyAggregateRequestHex.FromString,
                    response_serializer=types__pb2.VerifyAggregateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'BLSSigning', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BLSSigning(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GenerateKeypairRaw(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BLSSigning/GenerateKeypairRaw',
            types__pb2.GenerateKeypairRequestRaw.SerializeToString,
            types__pb2.GenerateKeypairResponseRaw.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateKeypairHex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BLSSigning/GenerateKeypairHex',
            types__pb2.GenerateKeypairRequestHex.SerializeToString,
            types__pb2.GenerateKeypairResponseHex.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignRaw(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BLSSigning/SignRaw',
            types__pb2.SignRequestRaw.SerializeToString,
            types__pb2.SignResponseRaw.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignHex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BLSSigning/SignHex',
            types__pb2.SignRequestHex.SerializeToString,
            types__pb2.SignResponseHex.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyRaw(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BLSSigning/VerifyRaw',
            types__pb2.VerifyRequestRaw.SerializeToString,
            types__pb2.VerifyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyHex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BLSSigning/VerifyHex',
            types__pb2.VerifyRequestHex.SerializeToString,
            types__pb2.VerifyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AggregateRaw(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BLSSigning/AggregateRaw',
            types__pb2.AggregateRequestRaw.SerializeToString,
            types__pb2.AggregateResponseRaw.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AggregateHex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BLSSigning/AggregateHex',
            types__pb2.AggregateRequestHex.SerializeToString,
            types__pb2.AggregateResponseHex.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyAggregatedRaw(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BLSSigning/VerifyAggregatedRaw',
            types__pb2.VerifyAggregateRequestRaw.SerializeToString,
            types__pb2.VerifyAggregateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyAggregatedHex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BLSSigning/VerifyAggregatedHex',
            types__pb2.VerifyAggregateRequestHex.SerializeToString,
            types__pb2.VerifyAggregateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
